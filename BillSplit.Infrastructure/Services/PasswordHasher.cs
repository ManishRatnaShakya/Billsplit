using BillSplit.Application.Interfaces.Authentication;

namespace BillSplit.Infrastructure.Services;

public class PasswordHasher : IPasswordHasher
{
    /// <summary>
    /// Hashes a plain-text password using the BCrypt algorithm.
    /// BCrypt is a secure password hashing function that incorporates a salt
    /// and a work factor to make brute-force attacks computationally expensive.
    /// The salt is automatically generated by the BCrypt.
    /// salt is a random string of characters added to a password before it's hashed
    /// </summary>
    /// <param name="password">The plain-text password to hash.</param>
    /// <returns>The hashed password string, which includes the salt and work factor.</returns>
    public string HashPassword(string password)
    {
        // BCrypt.Net.BCrypt.HashPassword internally generates a secure salt.
        return BCrypt.Net.BCrypt.HashPassword(password);
    }

    /// <summary>
    /// Verifies a plain-text password against a previously generated BCrypt hash.
    /// The method extracts the salt and work factor from the stored hash and uses them to
    /// hash the provided password for comparison. This prevents timing attacks by ensuring the
    /// same amount of work is done for both successful and unsuccessful attempts.
    /// </summary>
    /// <param name="password">The plain-text password to verify.</param>
    /// <param name="hashedPassword">The hashed password retrieved from storage.</param>
    /// <returns>True if the passwords match, otherwise false.</returns>
    public bool VerifyPassword(string password, string hashedPassword)
    {
        return BCrypt.Net.BCrypt.Verify(password, hashedPassword);
    }
}